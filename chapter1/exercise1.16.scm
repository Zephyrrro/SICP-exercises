(define (even? n)
  (= (remainder n 2) 0))

(define (square n)
  (* n n))

(define (fast-expt-recu b n)
  (cond ((= n 0) 1)
        ((even? n) (square (fast-expt-recu b (/ n 2))))
        (else (* b (fast-expt-recu b (- n 1))))
  )
)

(define (fast-expt-iter b n)
  (define (pow b m a)
    (cond ((= m 0) a)
          ((even? m) (pow (square b) (/ m 2) a))
          (else (pow b (- m 1) (* a b)))
    )
  )
  (pow b n 1)
)

(display (fast-expt-recu 3 4))
(newline)
(display (fast-expt-iter 3 4))
(newline)
(display (fast-expt-recu 0 4))
(newline)
(display (fast-expt-iter 0 4))
(newline)
(display (fast-expt-recu 3 0))
(newline)
(display (fast-expt-iter 3 0))
(exit)